Context: your pair wants to push on a red build

1
Other: Let's commit before lunch. 
You: I'd like to, but the build is red and I'm hungry. 
Other:	So let's push and go to lunch!
You: We shouldn't push on a red build. 
Other: The people who broke the build can still fix it with our commit in there. This isn't our responsibility and it shouldn't delay us. 
You: What if our push goes red too, since the issue isn't fixed yet? Then we have to stay and fix it...
Other: But they broke it in the first place!
You: I know you want to get this pushed as soon as possible, but I don't want to add unneeded difficulty to our other teammates' work
Other: Fine, let's take an early lunch.

2
Other: Ok, we're done with this section; lets push.
You: We can't push; the build is red.
Other:	Because of flaky tests! Let's just push and it will kick off again and probably go green.
You: I don't want our commit to get mixed up with the commit that made the build red, even if it's just a flaky test problem. 
Other: Their problems shouldn't affect us; we should just push. It's in an entirely different part of the codebase.

3
You: While the build is red, let's go check with the people whose names are on the commit, and see when they think it'll be green.
Other: But what are we supposed to do while we wait for them to fix it?
You: We can make a local commit, and work on the next piece of work. Or we could refactor our code. 
Other:	That is such a waste of time.
You: Yeah, but it's important to not complicate the situation when something is broken. 
Other: But it's such a simple breakage, we won't be complicating anything.
